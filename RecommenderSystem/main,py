"""
# _* coding: utf8 *_

filename: main.py

@author: sounishnath
createdAt: 2022-06-02 20:42:13
"""

from argparse import Namespace

import numpy as np
import pandas as pd
import tez
import torch
import torch.nn as nn
import torch.nn.functional as F
from sklearn import metrics, preprocessing


def split_dataset(df, kfold):
    df_train = df[df.kfold != kfold][["user", "movie", "rating"]]
    df_valid = df[df.kfold == kfold][["user", "movie", "rating"]]
    return df_train, df_valid


class Dataset:
    def __init__(self, users, movies, ratings) -> None:
        self.users = users
        self.movies = movies
        self.ratings = ratings

    def __len__(self):
        return len(self.users)

    def __getitem__(self, index):
        user = self.users[index]
        movie = self.movies[index]
        rating = self.ratings[index]
        return dict(
            user=torch.tensor(user, dtype=torch.long),
            movie=torch.tensor(movie, dtype=torch.long),
            rating=torch.tensor(rating, dtype=torch.float),
        )


class RecommenderSystemModel(tez.Model):
    def __init__(self, n_users, n_movies, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.user_embeddings = nn.Embedding(n_users, 32)
        self.movie_embeddings = nn.Embedding(n_movies, 32)
        self.normalizer = nn.LayerNorm(64)
        self.fc = nn.Linear(64, 1)
        self.step_scheduler_after = "epoch"

    def fetch_optimizer(self, *args, **kwargs):
        opt = torch.optim.SGD(self.parameters(), lr=1e-3)
        return opt

    def fetch_scheduler(self, *args, **kwargs):
        sch = torch.optim.lr_scheduler.StepLR(
            optimizer=self.optimizer,
            step_size=3,
            gamma=0.70,
        )
        return sch

    def monitor_metrics(self, y_out, original, *args, **kwargs):
        y_out = y_out.detach().cpu().numpy()
        original = original.detach().cpu().numpy()
        return dict(
            rmse=np.sqrt(metrics.mean_squared_error(y_true=original, y_pred=y_out))
        )

    def forward(self, user, movie, rating):
        user_emb = self.user_embeddings(user)
        # print('user_emb=', user_emb.size())
        movie_emb = self.movie_embeddings(movie)
        # print('movie_emb=', movie_emb.size())
        user_movie_concat = torch.concat([user_emb, movie_emb], dim=1)
        # print('user_movie_concat=', movie_emb.size())
        x = self.normalizer(user_movie_concat)
        # print('x=', x.size())
        y_out = F.relu6(self.fc(x))
        # print('y_out=', y_out.size())

        compute_loss = nn.MSELoss()(y_out, rating.view(-1, 1))
        compute_metric = self.monitor_metrics(y_out, rating.view(-1, 1))
        return y_out, compute_loss, compute_metric


if __name__ == "__main__":
    args = Namespace(size=30_000, seed=0)
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)

    df = pd.read_csv("./inputs/dataset.csv")
    df.user = preprocessing.LabelEncoder().fit_transform(df.user.values)
    df.movie = preprocessing.LabelEncoder().fit_transform(df.movie.values)

    df_train, df_valid = split_dataset(df, 0)
    print(
        dict(
            train_size=df_train.shape,
            valid_size=df_valid.shape,
        )
    )
    train_dataset = Dataset(
        users=df_train.user.values,
        movies=df_train.movie.values,
        ratings=df_train.rating.values,
    )
    valid_dataset = Dataset(
        users=df_valid.user.values,
        movies=df_valid.movie.values,
        ratings=df_valid.rating.values,
    )
    n_users = df.user.nunique()
    n_movies = df.movie.nunique()
    model = RecommenderSystemModel(n_users=n_users, n_movies=n_movies).to("mps")
    print(model)

    model.fit(
        train_dataset=train_dataset,
        valid_dataset=valid_dataset,
        train_bs=1024,
        valid_bs=128,
        device="mps",
        epochs=10,
    )

    model.save("model.bin")
