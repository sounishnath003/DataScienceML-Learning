# PIPELINE DEFINITION
# Name: download-dataset
# Inputs:
#    csv_uri: str
# Outputs:
#    train_dfx_out: system.Dataset
#    val_dfx_out: system.Dataset
components:
  comp-download-dataset:
    executorLabel: exec-download-dataset
    inputDefinitions:
      parameters:
        csv_uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        train_dfx_out:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        val_dfx_out:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-download-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.6.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pyarrow' 'pandas'\
          \ 'scikit-learn' 'lightning' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_dataset(\n    csv_uri: str,\n    train_dfx_out: Output[Dataset],\n\
          \    val_dfx_out: Output[Dataset],\n):\n    import logging\n    import numpy\
          \ as np\n    import pandas as pd\n\n    from sklearn.model_selection import\
          \ train_test_split\n\n    logging.getLogger().setLevel(logging.INFO)\n\n\
          \    CSV_URL = csv_uri\n    logging.info(\"received the CSV_URL = {}\".format(csv_uri))\n\
          \n    try:\n        dfx = pd.read_csv(CSV_URL, sep=\";\")\n    except Exception\
          \ as e:\n        logging.exception(\n            \"Unable to download training\
          \ & test CSV, check your internet connection. Error: %s\",\n           \
          \ e,\n        )\n\n    train_dfx, val_dfx = train_test_split(dfx, test_size=0.30,\
          \ random_state=31)\n\n    logging.info(\n        {\n            \"train_dfx.shape\"\
          : train_dfx.shape,\n            \"val_dfx.shape\": val_dfx.shape,\n    \
          \    }\n    )\n\n    train_dfx.to_csv(train_dfx_out.path, index=False)\n\
          \    val_dfx.to_csv(val_dfx_out.path, index=False)\n\n"
        image: python:3.11-slim
pipelineInfo:
  name: download-dataset
root:
  dag:
    outputs:
      artifacts:
        train_dfx_out:
          artifactSelectors:
          - outputArtifactKey: train_dfx_out
            producerSubtask: download-dataset
        val_dfx_out:
          artifactSelectors:
          - outputArtifactKey: val_dfx_out
            producerSubtask: download-dataset
    tasks:
      download-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-dataset
        inputs:
          parameters:
            csv_uri:
              componentInputParameter: csv_uri
        taskInfo:
          name: download-dataset
  inputDefinitions:
    parameters:
      csv_uri:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      train_dfx_out:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      val_dfx_out:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.6.0
